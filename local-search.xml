<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于 Vite 搭建 React18 + TS 的开发模板</title>
    <link href="/2022/05/25/14_%E6%90%AD%E5%BB%BA%20Vite%20+%20React%2018%20+%20TS%20%E5%BC%80%E5%8F%91%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/05/25/14_%E6%90%AD%E5%BB%BA%20Vite%20+%20React%2018%20+%20TS%20%E5%BC%80%E5%8F%91%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>Vite + React 18 + TS，集成 ESLint 和 Prettier ，开箱即用，无需再从零开始配置。便于统一团队代码风格及规范。</p><span id="more"></span><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>为了尽量减少手动配置，本项目的搭建将尽可能使用已有工具。</p></blockquote><p>每次想建一个项目，都需要从零开始配置？<code>ESLint</code> 和 <code>Prettie</code> 的冲突让人难受？</p><p>使用 <code>Create-React-App</code> 确实能节省一部分配置时间，但是为了有更好的开发体验，感受更快的热更新及打包速度，本次选用了 <a href="https://cn.vitejs.dev/">Vite</a>。</p><h2 id="搭建基础模板"><a href="#搭建基础模板" class="headerlink" title="搭建基础模板"></a>搭建基础模板</h2><h2 id="集成-ESLint-和-Prettier"><a href="#集成-ESLint-和-Prettier" class="headerlink" title="集成 ESLint 和 Prettier"></a>集成 ESLint 和 Prettier</h2><h3 id="各个包的作用"><a href="#各个包的作用" class="headerlink" title="各个包的作用"></a>各个包的作用</h3>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>效率</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Code-Challenges: 4-Technical-Books</title>
    <link href="/2021/08/05/13-Code-Challenges-4-Technical-Books/"/>
    <url>/2021/08/05/13-Code-Challenges-4-Technical-Books/</url>
    
    <content type="html"><![CDATA[<p>领英课程： <code>JavaScript Code Challenges</code> 系列：EP4- <a href="https://www.linkedin.com/learning/javascript-code-challenges/technical-books">Technical Books</a></p><span id="more"></span><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>题目只作简要描述，具体题目请点击上方👆🏻标题跳转。</p></blockquote><p>继承 挑战1（<a href="/2021/07/15/12_Code-Challenges-1-Available-Books/" title="Code Challenges: 1-Available Books">Code Challenges: 1-Available Books</a>）中的 <code>Book</code> 类，并新增一个 <code>edition</code> 属性，使用 <code>getEdition()</code> 方法获取当前版本。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 挑战1中的 Book 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">title, author, ISBN, numCopies</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.title = title;<br>    <span class="hljs-built_in">this</span>.author = author;<br>    <span class="hljs-built_in">this</span>.ISBN = ISBN;<br>    <span class="hljs-built_in">this</span>.numCopies = numCopies;<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">availability</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getAvailability();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">getAvailability</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.numCopies &lt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Out of stock&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.numCopies &lt; <span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`Low stock: <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.numCopies&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`In stock: <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.numCopies&#125;</span>`</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">sell</span>(<span class="hljs-params">numSold = <span class="hljs-number">1</span></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.numCopies &lt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;No stock&#x27;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.numCopies -= numSold;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">restock</span>(<span class="hljs-params">numCopiesStocked = <span class="hljs-number">5</span></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.numCopies += numCopiesStocked;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TechnicalBook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Book</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">title, author, ISBN, numCopies, edition</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(title, author, ISBN, numCopies);<br>    <span class="hljs-built_in">this</span>.edition = edition;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">getEdition</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`The current version of this book is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.edition&#125;</span>.`</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> myTechnicalBook = <span class="hljs-keyword">new</span> TechnicalBook(<br>  <span class="hljs-string">&#x27;......&#x27;</span>, <span class="hljs-comment">// 继承原属性</span><br>  <span class="hljs-string">&#x27;2.0&#x27;</span>, <span class="hljs-comment">// edition</span><br>);<br><br>myTechnicalBook.getEdition();<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>算法</tag>
      
      <tag>JavaScript</tag>
      
      <tag>JS Code Challenges</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Code Challenges: 1-Available Books</title>
    <link href="/2021/07/15/12_Code-Challenges-1-Available-Books/"/>
    <url>/2021/07/15/12_Code-Challenges-1-Available-Books/</url>
    
    <content type="html"><![CDATA[<p>领英课程： <code>JavaScript Code Challenges</code> 系列：EP1- <a href="https://www.linkedin.com/learning/javascript-code-challenges/available-books">Available Books</a></p><span id="more"></span><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>题目只作简要描述，具体题目请点击上方👆🏻标题跳转。</p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>title, author, ISBN, numCopies</code></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><code>getAvailability()</code>：根据书本的库存返回对应提示</p><p><code>sell(numSold)</code>：售出指定数量书本，若无传递参数，则为默认为1</p><p><code>restock(numCopies)</code>：入库数量，若无传递参数，则为默认为5</p><h3 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h3><ol><li>使用类</li><li>使用 getter 方法</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">title, author, ISBN, numCopies</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.title = title;<br>    <span class="hljs-built_in">this</span>.author = author;<br>    <span class="hljs-built_in">this</span>.ISBN = ISBN;<br>    <span class="hljs-built_in">this</span>.numCopies = numCopies;<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">availability</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getAvailability();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">getAvailability</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.numCopies &lt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Out of stock&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.numCopies &lt; <span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`Low stock: <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.numCopies&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`In stock: <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.numCopies&#125;</span>`</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">sell</span>(<span class="hljs-params">numSold = <span class="hljs-number">1</span></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.numCopies &lt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;No stock&#x27;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.numCopies -= numSold;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">restock</span>(<span class="hljs-params">numCopiesStocked = <span class="hljs-number">5</span></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.numCopies += numCopiesStocked;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Book</span>(<span class="hljs-params">title, author, ISBN, numCopies</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.title = title;<br>  <span class="hljs-built_in">this</span>.author = author;<br>  <span class="hljs-built_in">this</span>.ISBN = ISBN;<br>  <span class="hljs-built_in">this</span>.numCopies = numCopies;<br>&#125;<br><br>Book.prototype.sell = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">numSold = <span class="hljs-number">1</span></span>) </span>&#123;<br>  ...<br>&#125;<br><br>Book.prototype.restock = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">numCopiesStocked = <span class="hljs-number">5</span></span>) </span>&#123;<br>  ...<br>&#125;<br><br>Book.prototype.getAvailability = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  ...<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>算法</tag>
      
      <tag>JavaScript</tag>
      
      <tag>JS Code Challenges</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现一个sleep函数</title>
    <link href="/2021/05/25/11_%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAsleep%E5%87%BD%E6%95%B0/"/>
    <url>/2021/05/25/11_%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAsleep%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>从ES5、ES6+的角度实现一个sleep函数。</p><span id="more"></span><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6+"></a>ES6+</h2><p>主要方式包括：Promise（常用）、Async/Await（常用）、Generator（较少使用）。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sleep = <span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time))<br><br><span class="hljs-comment">// 1秒后，打印‘Promise’</span><br>sleep(<span class="hljs-number">1000</span>).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Promise&#x27;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sleep = <span class="hljs-function"><span class="hljs-params">time</span> =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time))<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Async/Await---Start&#x27;</span>);<br>  <span class="hljs-keyword">await</span> sleep(<span class="hljs-number">1000</span>);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Async/Await---End&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 先直接打印 Async/Await---Start，1秒后打印 Async/Await---End</span><br>output(); <br></code></pre></div></td></tr></table></figure><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">sleepGenerator</span>(<span class="hljs-params">time</span>) </span>&#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time))<br>&#125;<br><br><span class="hljs-comment">// 1秒后，打印‘Generator’</span><br>sleepGenerator(<span class="hljs-number">1000</span>).next().value.then(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Generator&#x27;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h2><p>ES5主要通过setTimeout回调函数的方式实现。</p><h3 id="使用回调"><a href="#使用回调" class="headerlink" title="使用回调"></a>使用回调</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span>(<span class="hljs-params">callback, time</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(callback, time);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;回调函数错误&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;回调&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 1秒后，打印‘回调’</span><br>sleep(output, <span class="hljs-number">1000</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近期跳槽面试记录</title>
    <link href="/2021/05/13/10_%E8%BF%91%E6%9C%9F%E8%B7%B3%E6%A7%BD%E9%9D%A2%E8%AF%95%E6%9C%89%E6%84%9F/"/>
    <url>/2021/05/13/10_%E8%BF%91%E6%9C%9F%E8%B7%B3%E6%A7%BD%E9%9D%A2%E8%AF%95%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>最近一两周在投简历面试，面了3家不同风格的公司：腾讯、外企、创业公司。简单谈下整体感受，做个记录📝</p><span id="more"></span><h2 id="跳槽原因"><a href="#跳槽原因" class="headerlink" title="跳槽原因"></a>跳槽原因</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>其实我在现公司工作的时间不长，也就八个月。</p><p>当初毕业后选择现公司的一个很大原因就是面试流程非常规范、感觉公司前景很好。</p><p>当初面试面了5轮，公司用的技术栈是React，但我只接触过Vue。经过面试，公司愿意给我机会。还记得在CTO面时，CTO表示公司不怎么招应届生，只招有经验的工程师，因为公司节奏快，需要的是能够快速上手干活的人，希望我做好准备。</p><p>入职后，果不其然，公司节奏非常快。在我入职的第二天，导师就要求我上手写项目，于是我就开始了一边看React官网一边写项目的奇妙经历。</p><p>同时，也认识到了自己的知识在“学到”和“实践”之间有较大差距，很多知识自己是知道，但是没能很好地应用起来，于是就开启了白天工作、晚上回家继续学习的生活。</p><p>后来，在走过各种曲折的路后，感觉自己回到正轨了，各种业务也能够比较从容地应对。</p><h3 id="困境"><a href="#困境" class="headerlink" title="困境"></a>困境</h3><p>由于公司经营的不是很好，员工们的待遇也跟不上了，发生了较大规模的离职潮。二十多人前端组来说，几个月时间，走了近一半人。</p><p>而我所在业务线，也多人离职，前端只剩我一个，我一个刚毕业没几个月的菜鸡，竟然得扛这个业务线的前端大旗。也是在这段时间，我从0到1独立开发了多个的功能模块。期间，我感觉压力也非常大，当然也成长了非常多，例如我开始更多地考虑项目的代码质量及风格、项目的可扩展性、组件复用、性能等多方面。非常幸运的是，我扛过来了。</p><h3 id="爆发"><a href="#爆发" class="headerlink" title="爆发"></a>爆发</h3><p>而真正让我萌生离职想法的，是接手某个屎山项目以后，似乎多个存在已久的问题都同时冒头了。</p><p>我接手的屎山项目，有非常多的自爆式写法，完全是为了跑路不顾一切写出来的代码，甚至出现“这么做我也没办法”的注释，完美诠释“高耦合低内聚”，导致牵一发动全身，后续迭代举步维艰。于是我主动跟业务线领导反映了这个情况，但他并没有放在心上，反而表达了一种是我经验不足之类的意思。我感受到了失望。</p><p>由于原来写这些代码的人都跑路了，这座屎山落到我头上，压得我喘不过气。明明是一些非常简单的功能，却受制于原代码而难以实现。曾想过重构重写，但前端哪里还够人手呢？反馈又得不到有效回应，于是每天早上醒来不想去上班，出现了 <a href="https://baike.baidu.com/item/%E8%81%8C%E4%B8%9A%E5%80%A6%E6%80%A0/8254445?fr=aladdin">burnout</a> 的症状。</p><p>由于离职的人多了，导致人手不够，导致手上的工作越来越多，而开发时间却越压越短。多次出现评估开发时间后被砍时间的情况。</p><p>再加上后来业务线领导说，怕我们工作不饱和，所以周报要多写字，在给我看了一篇上千字的模范作文周报后，我也觉得是时候说再见了。</p><p>跳过这个沉重的话题，开启新篇章~~😎</p><hr><h2 id="面试时间线"><a href="#面试时间线" class="headerlink" title="面试时间线"></a>面试时间线</h2><table><thead><tr><th>时间</th><th>进度</th></tr></thead><tbody><tr><td>4月30号早上</td><td>外企HR英语面</td></tr><tr><td>4月30号下午</td><td>创业公司技术面 + HR面</td></tr><tr><td>五一假期</td><td>旅行🚄、学习📖</td></tr><tr><td>5月6号</td><td>腾讯技术面</td></tr><tr><td>5月8号</td><td>外企技术面</td></tr><tr><td>5月11号早上</td><td>外企manager面</td></tr><tr><td>5月11号下午</td><td>创业公司CTO面</td></tr><tr><td>5月11号晚上</td><td>创业公司CEO面</td></tr><tr><td>5月12号</td><td>外企Offer、创业公司Offer</td></tr></tbody></table><h2 id="腾讯（凉）"><a href="#腾讯（凉）" class="headerlink" title="腾讯（凉）"></a>腾讯（凉）</h2><p>问题几乎都在围绕原理、源码，挺有深度。</p><p>估计面试官的内心是这样的👇🏻</p><p><img src="/images/stickers/shutUp.jpg" alt="就这水平你还敢来面试?"></p><p>面试官挺冷酷的，我也凉的透透的😂</p><hr><h2 id="外企（Offer）"><a href="#外企（Offer）" class="headerlink" title="外企（Offer）"></a>外企（Offer）</h2><p>面试体验直接打满分💯！</p><p>我是先在Boss直聘上投的简历。投递后，HR会先简单了解你的英文水平、是否能够全英面试、是否接受做coding task等，我 <del>瑟瑟发抖</del> 信心满满地表示：可以。😎</p><h3 id="一面：HR面（4月30号）"><a href="#一面：HR面（4月30号）" class="headerlink" title="一面：HR面（4月30号）"></a>一面：HR面（4月30号）</h3><p>HR会简单考察下我的英文水平，让我用英文做个自我介绍、再进行一些问题的问答等。</p><p>由于这是本次跳槽的第一场面试，我感觉自己说的磕磕绊绊，一度以为自己凉了😭。不过幸好通过了，然后HR就发了coding task，并提醒做好英文简历一并提交。</p><p>coding task比较简单，应该主要是考察代码风格吧。最难的是写英文简历，写的头疼😂。</p><h3 id="二面：技术面（5月8号）"><a href="#二面：技术面（5月8号）" class="headerlink" title="二面：技术面（5月8号）"></a>二面：技术面（5月8号）</h3><p>先自我介绍。</p><p>然后在线coding，一道考察位运算的算法题。题目要求线性复杂度、并且不能用额外空间，而我写的是O(n²)复杂度所以我并没有满足需求。后来面试官还问了几种排序，讲插入排序的思想。</p><p>然后从数据结构、网络、前端基础、React、Git、敏捷开发等都问了一遍，考察范围非常广，总历时1.5小时。</p><h3 id="三面：manager面（5月11号）"><a href="#三面：manager面（5月11号）" class="headerlink" title="三面：manager面（5月11号）"></a>三面：manager面（5月11号）</h3><p>自我介绍，然后聊天。</p><p>manager非常会鼓励人，循循善诱。最后问我期望薪资，我说了个范围X-Y，然后manager直接给我开了Y，非常惊喜🤩。</p><h3 id="Offer-Call（5月11号）"><a href="#Offer-Call（5月11号）" class="headerlink" title="Offer Call（5月11号）"></a>Offer Call（5月11号）</h3><p>讲了薪资福利、背调事项等，确定入职时间。</p><hr><h2 id="创业公司（Offer）"><a href="#创业公司（Offer）" class="headerlink" title="创业公司（Offer）"></a>创业公司（Offer）</h2><p>公司融资融了几个亿，发展应该是比较迅速的，前端所用技术栈是Typescript + React。</p><h3 id="一面：技术面-hr面（4月30号）"><a href="#一面：技术面-hr面（4月30号）" class="headerlink" title="一面：技术面 + hr面（4月30号）"></a>一面：技术面 + hr面（4月30号）</h3><p>一上来直接考察非常高级高端的技术问题、猝不及防😂。后面回到常规问题。最后面试官把电脑推过来，让我完成一道算法题，完成后，到了HR面。</p><p>HR面主要介绍公司情况、聊以往薪资、问期望薪资等。</p><h3 id="二面：CTO面（5月11号下午）"><a href="#二面：CTO面（5月11号下午）" class="headerlink" title="二面：CTO面（5月11号下午）"></a>二面：CTO面（5月11号下午）</h3><p>CTO是个超级大佬，但不会让人觉的不可靠近，反而非常nice🤩。或许这就是大佬吧。</p><p>主要内容就是在线coding，给定一个需要实现的功能，用React实现，之前技术面编程是有IDE的，这次是用空白文本编程，CTO还打趣说他就是这样过来的哈哈哈。</p><p>花了不少时间在格式调整上😄，然后代码写完，CTO表示可以，便问了期望薪资。</p><h3 id="三面CEO面（5月11号晚上）"><a href="#三面CEO面（5月11号晚上）" class="headerlink" title="三面CEO面（5月11号晚上）"></a>三面CEO面（5月11号晚上）</h3><p>得益于HR小姐姐的快速推进，刚面完CTO面就联系我，问我今晚是否有空进行终面，虽然很累（一天3场面试😭），但是抵不住HR小姐姐的热情，便答应了。</p><p>终面主要考察职业规划、思考之类的。</p><h3 id="Offer-Call（5月12号）"><a href="#Offer-Call（5月12号）" class="headerlink" title="Offer Call（5月12号）"></a>Offer Call（5月12号）</h3><p>HR小姐姐非常热情，开门见山直接开了一个非常有竞争力的薪资😱，非常惊喜，并表示非常希望我能加入公司。同时得知我打算接外企Offer后，晓之以理，动之以情地劝了我挺久🥺。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>我最终接了外企Offer，一是整个面试流程体验非常棒。其次，薪资及各方面福利也是非常满意。还有就是外企很人性化的制度吸引了我。</p><p>所以后面的面试也推掉啦~准备入职外企❤️🥰🤩</p><p>本次面试之旅就告一段落了，这次的时间跨度其实也就一周多的时间，没想到会这么快结束战斗，感觉还是挺意外的。</p><p>最后，希望下个月顺利入职外企~~😄</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>记录</tag>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用栈实现队列</title>
    <link href="/2021/04/29/09_%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2021/04/29/09_%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>LeetCode 232 用栈实现队列 (JavaScript版😎)</p><span id="more"></span><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>使用栈实现队列的下列操作：</p><p>push(x) – 将一个元素放入队列的尾部。</p><p>pop() – 从队列首部移除元素。</p><p>peek() – 返回队列首部的元素。</p><p>iSEmpty() – 返回队列是否为空。</p></blockquote><p>说明：</p><p>你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> queue = <span class="hljs-keyword">new</span> MyQueue();<br>queue.push(<span class="hljs-number">1</span>);<br>queue.push(<span class="hljs-number">2</span>);<br>queue.peek(); <span class="hljs-comment">// 返回 1</span><br>queue.pop(); <span class="hljs-comment">// 返回 1</span><br>queue.empty(); <span class="hljs-comment">// 返回 false</span><br></code></pre></div></td></tr></table></figure><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化数据结构。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyQueue</span>(<span class="hljs-params">contents = []</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.stack = [...contents];<br>  <span class="hljs-built_in">this</span>.tempStack = [];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将元素 x 推入队列。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> <span class="hljs-variable">x</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;void&#125;</span></span></span><br><span class="hljs-comment"> */</span><br>MyQueue.prototype.push = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.stack.push(x);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将队头元素推出，并返回该值。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br>MyQueue.prototype.pop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.stack.length &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.tempStack.push(<span class="hljs-built_in">this</span>.stack.pop());<br>  &#125;<br>  res = <span class="hljs-built_in">this</span>.tempStack.pop();<br><br>  <span class="hljs-comment">// 由于上面的 stack 已经全部 pop 出到 tempStack,</span><br>  <span class="hljs-comment">// 所以，需要在拿到目标值 res 后，将所有值重新推入 stack。</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.tempStack.length &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.stack.push(<span class="hljs-built_in">this</span>.tempStack.pop());<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取队头元素。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br>MyQueue.prototype.peek = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.stack[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断列队是否为空。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;boolean&#125;</span></span></span><br><span class="hljs-comment"> */</span><br>MyQueue.prototype.isEmpty = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> !<span class="hljs-built_in">this</span>.stack.length;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取队列长度。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment"> */</span><br>MyQueue.prototype.size = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.stack.length;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>ES6 class 实现：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">contents = []</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.stack = [...contents];<br>    <span class="hljs-built_in">this</span>.tempStack = [];<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">push</span>(<span class="hljs-params">x</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.stack.push(x);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">pop</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> res;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.stack.length &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">this</span>.tempStack.push(<span class="hljs-built_in">this</span>.stack.pop());<br>    &#125;<br>    res = <span class="hljs-built_in">this</span>.tempStack.pop();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.tempStack.length &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">this</span>.stack.push(<span class="hljs-built_in">this</span>.tempStack.pop());<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">peek</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.stack[<span class="hljs-number">0</span>];<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">isEmpty</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> !<span class="hljs-built_in">this</span>.stack.length;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">size</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.stack.length;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/images/algorithms/leetcode-232-result.png" alt="结果测试"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>算法</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown实用技巧</title>
    <link href="/2021/04/24/08_Markdown%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/04/24/08_Markdown%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>早有耳闻<strong>Markdown</strong>，然而我一直没什么机会真正的接触它。但自开始写博博客以来，我便和它形影不离，才感叹：相见恨晚！🤩</p><span id="more"></span><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 HTML 文档。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在没开始写博客之前，我更习惯在云笔记上写些想法、心得或随想。相较博客而言，在自己的笔记里可以放飞自我，不用在意格式，也不用在意排版，感觉只要只要记下了最核心的“内容”，便足矣。😂</p><p>那既然要写博客，可不能写的这么放飞自我，否则读者的表情…👇</p><p><img src="/images/stickers/WTF.jpeg" alt="这写的是啥"></p><p>于是，我“被迫”有了真正使用 Markdown 的机会。😎</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>下面简要介绍下基本语法~</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>一个#是一级标题，二个#是二级标题，以此类推。共支持六级标题。</p><p>注：#后要跟个空格再写文字哦🥺</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="加粗（本羊用的最多🤩）"><a href="#加粗（本羊用的最多🤩）" class="headerlink" title="加粗（本羊用的最多🤩）"></a>加粗（本羊用的最多🤩）</h4><p>文字左右分别用两个*号包起来</p><p>效果：<strong>我加粗了</strong></p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>文字左右分别用一个*号包起来</p><p>效果：<em>我歪了</em></p><h4 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h4><p>文字左右分别用三个*号包起来</p><p>效果：<em><strong>我又粗又斜</strong></em></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>文字左右分别用两个~~号包起来</p><p>效果：<del>懒惰（bushi）</del> 科技，是第一生产力！👏</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>例如本文开头关于 Markdown 的描述，就是用的引用（不知道为啥我觉得这个很酷😎）</p><p>使用方法：<code>&gt;</code> 接引用。&gt;可以无限嵌套哦。效果如下：</p><blockquote><p>为何我的眼里常含泪水，因为我对前端爱得深沉。——羊本羊</p></blockquote><h3 id="本文-Markdown-展示"><a href="#本文-Markdown-展示" class="headerlink" title="本文 Markdown 展示"></a>本文 Markdown 展示</h3><h3 id="分隔线（还没用到过🥲）"><a href="#分隔线（还没用到过🥲）" class="headerlink" title="分隔线（还没用到过🥲）"></a>分隔线（还没用到过🥲）</h3><p>连续三个或以上的 - 或 *</p><hr><p>效果：👆</p><h3 id="图片（我的最爱！😍）"><a href="#图片（我的最爱！😍）" class="headerlink" title="图片（我的最爱！😍）"></a>图片（我的最爱！😍）</h3><p>写博客当然得加上图片，理由如下：</p><ol><li>补充说明</li><li>增加文章丰富性</li><li>我想用表情包！🤩</li></ol><p><code>![alt属性文本](图片地址 &#39;可选标题&#39;)</code></p><p>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。效果：</p><p><img src="/images/stickers/what.png" alt="啥？"></p><h3 id="超链接（常用😘）"><a href="#超链接（常用😘）" class="headerlink" title="超链接（常用😘）"></a>超链接（常用😘）</h3><p><code>[超链接名](超链接地址 &quot;可选超链接title&quot;)</code></p><blockquote><p>tips: hexo中需变量：<code>&#123;% post_link 效率神器——Alfred %&#125;</code></p></blockquote><p>效果：</p><a href="/2021/04/17/07_%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Alfred/" title="效率神器——Alfred">效率神器——Alfred</a><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p><code>- + *</code> 均可</p><p>如</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 小明<br><span class="hljs-bullet">-</span> 小美<br><span class="hljs-bullet">-</span> 小羊<br></code></pre></div></td></tr></table></figure><p>效果：</p><ul><li>小明</li><li>小美</li><li>小羊</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 小明<br><span class="hljs-bullet">2.</span> 小美<br><span class="hljs-bullet">3.</span> 小羊<br></code></pre></div></td></tr></table></figure><p>效果：</p><ol><li>小明</li><li>小美</li><li>小羊</li></ol><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>在上一级与下一级间以3个空格作为开头即可，效果：</p><ol><li>小明<ol><li>明之子</li><li>明之女</li></ol></li><li>小美<ol><li>美之子</li><li>美之女</li></ol></li><li>小羊<ol><li>羊之子</li><li>羊之女</li></ol></li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行</code>，用法：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">|  表头   | 表头  |<br>|  ----  | ----  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |<br></code></pre></div></td></tr></table></figure><p>设置表格的对齐方式：</p><ol><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ol><p>以 <a href="/2021/04/05/04_Oh-My-Zsh%E4%B8%ADGit%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/" title="Oh-My-Zsh中Git的常用快捷键">Oh-My-Zsh中Git的常用快捷键</a> 这篇文章用到的为例，如：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">快捷键|完整写法<br>|:-|:-|<br>g|git<br>gaa|git add .<br>gcmsg|git commit -m<br>gcb|git checkout -b<br>gst|git status<br>gf|git fetch<br>gl|git pull<br>gup|git pull --rebase<br>grb|git rebase<br>gsta|git stash save<br>gstp|git stash pop<br>gcp|git cherry-pick<br>mg|git merge<br>gp|git push<br></code></pre></div></td></tr></table></figure><p>效果：</p><table><thead><tr><th align="left">快捷键</th><th align="left">完整写法</th></tr></thead><tbody><tr><td align="left">g</td><td align="left">git</td></tr><tr><td align="left">gaa</td><td align="left">git add .</td></tr><tr><td align="left">gcmsg</td><td align="left">git commit -m</td></tr><tr><td align="left">gcb</td><td align="left">git checkout -b</td></tr><tr><td align="left">gst</td><td align="left">git status</td></tr><tr><td align="left">gf</td><td align="left">git fetch</td></tr><tr><td align="left">gl</td><td align="left">git pull</td></tr><tr><td align="left">gup</td><td align="left">git pull –rebase</td></tr><tr><td align="left">grb</td><td align="left">git rebase</td></tr><tr><td align="left">gsta</td><td align="left">git stash save</td></tr><tr><td align="left">gstp</td><td align="left">git stash pop</td></tr><tr><td align="left">gcp</td><td align="left">git cherry-pick</td></tr><tr><td align="left">mg</td><td align="left">git merge</td></tr><tr><td align="left">gp</td><td align="left">git push</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h4><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-code">`单行代码`</span><br></code></pre></div></td></tr></table></figure><h4 id="代码块（用的很多😘）"><a href="#代码块（用的很多😘）" class="headerlink" title="代码块（用的很多😘）"></a>代码块（用的很多😘）</h4><p>用法如图：</p><p><img src="/images/markdown-block.png" alt="代码块"></p><blockquote><p>tips: ```后跟js代表当前是JavaScript的代码块，方便高亮。</p></blockquote><p>效果：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showDemo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Demo&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，平常用的 Markdown 语法主要是以上介绍的这些，已经足够应付日常的写作~</p><p>如果以后有用到其他的语法，我会继续补充本文章滴~😎</p><p>对了，补充一个 VS Code 插件 <code>Markdown All in One</code>， 可以实时预览~</p><p><img src="/images/markdown-profile.png" alt="Markdown All in One 插件实时预览"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>博客</tag>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>效率神器——Alfred</title>
    <link href="/2021/04/17/07_%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Alfred/"/>
    <url>/2021/04/17/07_%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Alfred/</url>
    
    <content type="html"><![CDATA[<blockquote><p>如Alfred官方所述：Alfred是一款屡获殊荣的macOS应用程序，可通过热键，关键字，文本扩展等功能提高您的效率。搜索Mac和网页的内容，并通过自定义操作来控制Mac来提高生产力。😍</p></blockquote><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Alfred与Mac自带的“聚焦”有何区别呢？简单来说，Alfred就是一个更强大的“聚焦”。</p><p>本文将介绍本羊自己用的比较多的功能，如粘贴板、终端、搜索文件、搜索文件内部内容等。</p><p>直接按下 <code>⌥ + 空格</code> 唤出 Alfred，基本操作就不多介绍了，直接开始！！</p><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><ol><li><p>剪贴板（强烈推荐！！🤩）</p><p>电脑换成MacBook以后，我发现macOS上竟然没有那个极其方便的功能 —— <strong>剪切板😱</strong>！！</p><p>在Windows系统上，可以一次性复制多个项，然后只需按下 <code>Win + V</code> 唤出剪切板，即可方便快捷地进行批量粘贴操作。</p><p>而macOS没有该功能！！😩 作为一名 <del>Ctrl CV工程师</del> 需要经常用到该功能的程序员，当然不可接受。而Alfred，让你不用额外安装剪切板软件，即可实现该功能。🤩</p><p>使用方法：<code>⌥ + ⌘ + C</code></p><p><img src="/images/alfred/clipboard.png" alt="剪切板"></p><p>支持文本、图片~</p></li><li><p>搜索</p><ol><li><p>浏览器搜索（支持检索浏览器历史记录、书签、搜索引擎）</p><p><img src="/images/alfred/browser-search.png" alt="浏览器搜索"></p></li><li><p>本地搜索（文件搜索、文件内部内容搜索）</p><p>文件搜索： <code>&#39;</code>（或者在设置里直接设置成空格），接内容即可检索文件。</p><p><img src="/images/alfred/file-search.png" alt="文件搜索"></p><p>文件内部内容搜索： <code>in</code> 接内容即可检索文件。例如，我这篇文章的摘要包含了“<strong>屡获殊荣</strong>”四个字，因此本文件也被检索到了🤩</p><p><img src="/images/alfred/in-search.png" alt="文件内容搜索"></p></li><li><p>其他自定义搜索（如在指定网站搜索，例如YouTube、MDN、StackOverflow）</p><p><img src="/images/alfred/YouTube-search.png" alt="油管搜索李子柒🤩"></p></li></ol></li><li><p>自定义文本片（Snippet）</p><p>需要经常输入指定内容？太长不想手打？<strong>自定义文本片</strong> 了解一下😎。</p><p><img src="/images/alfred/snp-setting.png" alt="用法非常简单"></p><p>用法：<code>snip 关键词</code> ，输入关键字后，会自动弹出自定义内容。日常用法：每次写东西前习惯标个今天日期，可以自定义 <code>&#123;date&#125;</code> 即可代表今天。使用时，只需 <code>snip today</code> 然后回车，自动生成2021-04-22🤩</p><p><img src="/images/alfred/snp-id.png" alt="身份证太长不想输咋办"></p></li><li><p>直接输入终端命令</p><p>不想每次打开终端再输入命令执行咋办？直接 <code>&gt;命令</code> 了解一下🤩</p><p><img src="/images/alfred/alfred-terminal.png" alt="直接执行命令"></p><p><img src="/images/alfred/terminal-date.png" alt="效果"></p><p>注意，Alfred默认使用默认终端，若想使用 <code>iterm</code> ，可以在Alfred里选Terminal-“自定义”，配置如下：</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs AppleScript"><span class="hljs-keyword">on</span> alfred_script(q)<br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">application</span> <span class="hljs-string">&quot;iTerm2&quot;</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">application</span> <span class="hljs-string">&quot;iTerm&quot;</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">run script</span> <span class="hljs-string">&quot;</span><br><span class="hljs-string">      on run &#123;q&#125;</span><br><span class="hljs-string">        tell application \&quot;iTerm\&quot;</span><br><span class="hljs-string">          activate</span><br><span class="hljs-string">          try</span><br><span class="hljs-string">            select first window</span><br><span class="hljs-string">            set onlywindow to true</span><br><span class="hljs-string">          on error</span><br><span class="hljs-string">            create window with default profile</span><br><span class="hljs-string">            select first window</span><br><span class="hljs-string">            set onlywindow to true</span><br><span class="hljs-string">          end try</span><br><span class="hljs-string">          tell the first window</span><br><span class="hljs-string">            if onlywindow is false then</span><br><span class="hljs-string">              create tab with default profile</span><br><span class="hljs-string">            end if</span><br><span class="hljs-string">            tell current session to write text q</span><br><span class="hljs-string">          end tell</span><br><span class="hljs-string">        end tell</span><br><span class="hljs-string">      end run</span><br><span class="hljs-string">    &quot;</span> <span class="hljs-keyword">with</span> parameters &#123;q&#125;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">run script</span> <span class="hljs-string">&quot;</span><br><span class="hljs-string">      on run &#123;q&#125;</span><br><span class="hljs-string">        tell application \&quot;iTerm\&quot;</span><br><span class="hljs-string">          activate</span><br><span class="hljs-string">          try</span><br><span class="hljs-string">            select first window</span><br><span class="hljs-string">          on error</span><br><span class="hljs-string">            create window with default profile</span><br><span class="hljs-string">            select first window</span><br><span class="hljs-string">          end try</span><br><span class="hljs-string">          tell the first window</span><br><span class="hljs-string">            tell current session to write text q</span><br><span class="hljs-string">          end tell</span><br><span class="hljs-string">        end tell</span><br><span class="hljs-string">      end run</span><br><span class="hljs-string">    &quot;</span> <span class="hljs-keyword">with</span> parameters &#123;q&#125;<br>  <span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span><br><span class="hljs-keyword">end</span> alfred_script<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>更多其他常用功能及强大的Workflow日后继续补充，更多使用方法可参考 <a href="https://www.alfredapp.com/">Alfred官方</a>~😎</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>效率</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见排序算法-JavaScript实现</title>
    <link href="/2021/04/10/06_%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-JavaScript%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/04/10/06_%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-JavaScript%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>前几天偶尔看到了一些排序算法的动态图，觉得非常生动且有助于理解。而自己也有一段时间没接触过各种算法了，因此决定整理一下，将他们拾起来 📝</p><span id="more"></span><h3 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h3><ol><li><p>稳定排序：如果 a 原本在 b 的前面，且 a == b，排序之后 a 仍然在 b 的前面，则为稳定排序。</p></li><li><p>非稳定排序：如果 a 原本在 b 的前面，且 a == b，排序之后 a 可能不在 b 的前面，则为非稳定排序。</p></li><li><p>原地排序：原地排序就是指在排序过程中不申请多余的存储空间，只利用原来存储待排数据的存储空间进行比较和交换的数据排序。</p></li><li><p>非原地排序：需要利用额外的数组来辅助排序。</p></li><li><p>时间复杂度：一个算法执行所消耗的时间。</p></li><li><p>空间复杂度：运行完一个算法所需的内存大小。</p></li></ol><p><img src="/images/algorithms/sort-table.jpg" alt="对比图"></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote><p>每次比较如果发现较小的元素在后面，就交换两个相邻的元素</p><p>每轮循环比较后，该轮最后一个值就是该轮最大的值（即大的沉底，小的浮起）</p></blockquote><p><img src="/images/algorithms/bubble.gif" alt="冒泡排序"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bubbleSort</span>(<span class="hljs-params">array</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; array.length - i - <span class="hljs-number">1</span>; j++) &#123; <span class="hljs-comment">// 每轮都会排好一个</span><br>      <span class="hljs-keyword">if</span> (array[j] &gt; array[j + <span class="hljs-number">1</span>]) &#123;<br>        [array[j], array[j + <span class="hljs-number">1</span>]] = [array[j + <span class="hljs-number">1</span>], array[j]];<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote><p>选择排序是冒泡排序的改进。</p><p>选择排序先并不急于调换位置，而是每轮看哪个数最小就记下该数所在的位置minIndex，等该轮扫描完毕，再让最小值和当前指定值对换，这样一来每一轮比较都只需要换一次位置。</p><p>缺点：不是稳定排序。</p></blockquote><p><img src="/images/algorithms/select.gif" alt="选择排序"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectSort</span>(<span class="hljs-params">array</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> minIndex;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span>; i++) &#123;<br>    minIndex = i; <span class="hljs-comment">// 假设本轮的第一个值为最小值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; array.length; j++) &#123; <span class="hljs-comment">// 默认第一个已排好</span><br>      <span class="hljs-keyword">if</span> (array[j] &lt; array[minIndex]) &#123;<br>        minIndex = j<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i !== minIndex) &#123;  <span class="hljs-comment">//如果该最小值和原最小值不同，则交换其值</span><br>      [array[i], array[minIndex]] = [array[minIndex], array[i]];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><blockquote><p>重点：部分有序。将无序部分和有序部分进行比较，然后插入对应位置。</p><p>首先要实现局部有序：直接把第一个元素看成有序。</p><p>数据规模越小、数据有序程度越高，越高效（移动少）</p></blockquote><p><img src="/images/algorithms/insert.gif" alt="插入排序"></p><p>代码实现：</p><p>方法1：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertionSort1</span>(<span class="hljs-params">array</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> temp;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>    temp = array[i]; <span class="hljs-comment">// 每轮取出当前值，避免被覆盖。</span><br>    <span class="hljs-keyword">let</span> j = i - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span>  &amp;&amp; array[j] &gt; temp) &#123;<br>      array[j + <span class="hljs-number">1</span>] = array[j];<br>      j--;<br>    &#125;<br>    array[j + <span class="hljs-number">1</span>] = temp;<br>  &#125;<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>方法2：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertionSort2</span>(<span class="hljs-params">array</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> temp, i, j;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br>    temp = array[i];<br>    <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>      <span class="hljs-keyword">if</span> (array[j] &gt; temp) &#123;<br>        array[j + <span class="hljs-number">1</span>] = array[j];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 务必跳出该轮循环，避免往下执行</span><br>      &#125;<br>    &#125;<br>    array[j + <span class="hljs-number">1</span>] = temp;<br>  &#125;<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><blockquote><p>希尔排序是插入排序的改进。</p><p>当数据规模较大时或有序程度不高时，插入排序的元素移动次数较多，插入效率不高。为了解决这个问题，希尔排序出现了。</p><p>希尔排序把较大的数据集合分割成若干个小组（逻辑上分组），然后对每一个小组分别进行插入排序，此时，插入排序所作用的数据量比较小（每一个小组），插入的效率比较高。</p></blockquote><p><strong>实现过程</strong>：先让数组中任意间隔为 gap 的元素有序，刚开始 gap 的大小可以是 gap = n / 2，接着让 gap = n / 4，让 gap 一直缩小，当 gap = 1 时，也就是此时数组中任意间隔为1的元素有序，此时的数组就是有序的了。</p><p><img src="/images/algorithms/Shell.gif" alt="希尔排序"></p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shellSort</span>(<span class="hljs-params">array</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> len = array.length;<br>  <span class="hljs-keyword">let</span> gap = <span class="hljs-built_in">Math</span>.floor(len / <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">let</span> temp;<br>  <span class="hljs-keyword">while</span> (gap &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//gap不断减小</span><br><br>    <span class="hljs-comment">// 相当于一个有间隔的插入排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = gap; i &lt; len; i += gap) &#123;<br>      temp = array[i];<br>      <span class="hljs-keyword">let</span> j = i;<br>      <span class="hljs-keyword">while</span> (j &gt;= gap &amp;&amp; array[j - gap] &gt; temp) &#123;<br>        array[j] = array[j - gap];<br>        j -= gap;<br>      &#125;<br>      array[j] = temp;<br>    &#125;<br><br>    gap = <span class="hljs-built_in">Math</span>.floor(gap / <span class="hljs-number">2</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>快速排序的基本思想：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p></blockquote><p><img src="/images/algorithms/quick.gif" alt="快速排序"></p><p>代码实现：</p><p>简单版：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params">arr = []</span>) </span>&#123;<br>  <span class="hljs-comment">// 当数组长度小于等于1时，直接返回数组</span><br>  <span class="hljs-keyword">if</span> (arr.length &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> arr;<br>  <span class="hljs-keyword">const</span> left = [];<br>  <span class="hljs-keyword">const</span> right = [];<br>  <span class="hljs-keyword">const</span> pivot = arr[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">// 比指定值大的，推进右数组，否则推进左数组</span><br>    arr[i] &gt; pivot ? right.push(arr[i]) : left.push(arr[i]);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> [...quickSort(left), pivot, ...quickSort(right)];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>标准版：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">quickSort</span>(<span class="hljs-params">arr = []</span>) </span>&#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>算法</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac必备神器——Homebrew</title>
    <link href="/2021/04/06/05_Mac%E5%BF%85%E5%A4%87%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Homebrew/"/>
    <url>/2021/04/06/05_Mac%E5%BF%85%E5%A4%87%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Homebrew/</url>
    
    <content type="html"><![CDATA[<p>你是否曾经：想安装某个软件，却发现 App Store 没有上架该软件（例如VS Code）🤬，然后需要进行：打开搜索引擎搜索进入官网、下载、安装、删除安装包……一系列烦人操作？如果是，看万这篇文章，相信你会直呼“<strong>相见恨晚🥺</strong>”</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 <a href="/2021/04/01/02_MacBook%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%B8%85%E5%8D%95/" title="MacBook前端开发必备清单">MacBook前端开发必备清单</a> 中，本羊简要介绍了下 HomeBrew ，如果你没看过那篇文章，这里本羊再当一遍复读机：</p><blockquote><p><a href="https://brew.sh/index_zh-cn">Homebrew</a> 是一款用于 macOS 的开源的软件包管理器，能够帮助你快速下载软件。</p></blockquote><p>   <strong>那为什么要选Homebrew？</strong></p><p>   一般情况下，在 Mac 上安装软件程序，通常是在 Mac App Store 搜索，然后安装。但是，对于不在 Mac App Store 上架的软件，你需要：</p><ol><li><p>先在搜索引擎中搜索，找到官网，</p></li><li><p>然后打开下载页面下载，</p></li><li><p>最后再将下载的安装包拖到「软件程序」文件夹或执行安装。</p></li><li><p>清理安装包</p></li></ol><p>   这也太麻烦了吧😅😅😅</p><p>   而使用Homebrew，你只需要在终端输入一行命令，就可以解决包括查找、下载和安装软件的一系列步骤。</p><p>   例如安装Chrome浏览器，你只需在终端输入：</p><p>   <code>brew install google-chrome</code></p><p>   例如安装git：</p><p>   <code>brew install git</code></p><p>   是不是非常简单快捷？👏👏👏 不多啰嗦，直奔主题吧！</p><h2 id="安装及用法"><a href="#安装及用法" class="headerlink" title="安装及用法"></a>安装及用法</h2><h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><p>在终端输入：</p><p><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code></p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>在以前，安装软件需要特意注明 <code>install cask</code> ，现在可以直接 <code>install</code> 想要安装的软件即可：</p><p><code>brew install 软件名</code></p><p>以安装强大的 IINA 播放器为例子，如下图：</p><p><img src="/images/brew-install.jpg" alt="安装 IINA"></p><p>tips: 安装的软件位于 usr/local/Caskroom 目录下。</p><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><p><code>brew uninstall iina</code></p><p><img src="/images/brew-uninstall.jpg" alt="卸载 IINA"></p><h3 id="显示所有的已安装的软件"><a href="#显示所有的已安装的软件" class="headerlink" title="显示所有的已安装的软件"></a>显示所有的已安装的软件</h3><p><code>brew list</code></p><h3 id="升级homebrew-（从github下载最新版本）"><a href="#升级homebrew-（从github下载最新版本）" class="headerlink" title="升级homebrew （从github下载最新版本）"></a>升级homebrew （从github下载最新版本）</h3><p><code>brew update</code></p><p>更多 brew 命令及可安装的软件可查看 <a href="https://brew.sh/index_zh-cn">Homebrew</a> 官网。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>安装 Homebrew 以后，大幅提高了软件管理效率，告别了</p><blockquote><p>“要安装，请拖动此图标……”</p></blockquote><p>再也不再需要像以前一样进行繁琐的操作了~🥳</p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>当 App Store 的微信版本还停留在2.6时，谁又想到在 Homebrew 上微信已经更新了3.0版本呢？😎</p><p><code>brew install wechat</code></p><p><img src="/images/wechat-tips.jpg" alt="微信 3.0"></p><p>既然是3.0版本，那就可以直接在电脑上刷朋友圈了！🤣</p><p><img src="/images/wechat-moment.jpg" alt="微信 朋友圈"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Mac</tag>
      
      <tag>效率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oh-My-Zsh中Git的常用快捷键</title>
    <link href="/2021/04/05/04_Oh-My-Zsh%E4%B8%ADGit%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/04/05/04_Oh-My-Zsh%E4%B8%ADGit%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>每次使用Git都要输入太多重复内容？Oh-My-Zsh的Git捷键帮到你~🤩</p><span id="more"></span><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>下面将展示 Oh-My-Zsh 中 Git 的快捷键，第一部分的“常用快捷键”已经涵盖了日常大部分使用场景。</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th>快捷键</th><th align="left">完整写法</th></tr></thead><tbody><tr><td>g</td><td align="left">git</td></tr><tr><td>gaa</td><td align="left">git add .</td></tr><tr><td>gcmsg</td><td align="left">git commit -m</td></tr><tr><td>gcb</td><td align="left">git checkout -b</td></tr><tr><td>gst</td><td align="left">git status</td></tr><tr><td>gf</td><td align="left">git fetch</td></tr><tr><td>gl</td><td align="left">git pull</td></tr><tr><td>gup</td><td align="left">git pull –rebase</td></tr><tr><td>grb</td><td align="left">git rebase</td></tr><tr><td>gsta</td><td align="left">git stash save</td></tr><tr><td>gstp</td><td align="left">git stash pop</td></tr><tr><td>gcp</td><td align="left">git cherry-pick</td></tr><tr><td>mg</td><td align="left">git merge</td></tr><tr><td>gp</td><td align="left">git push</td></tr></tbody></table><h3 id="完整版快捷键"><a href="#完整版快捷键" class="headerlink" title="完整版快捷键"></a>完整版快捷键</h3><p>上面的常用快捷键已经涵盖日常大部分使用场景，如果你还需要更详尽的信息，可以查看Oh-My-Zsh官方GitHub的Git插件源码：</p><p><a href="https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/git.plugin.zsh">git.plugin.zsh</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>效率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终端体验提升计划-iTerm2 + Oh-My-Zsh</title>
    <link href="/2021/04/04/03_%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C%E6%8F%90%E5%8D%87%E8%AE%A1%E5%88%92-iTerm2-Oh-My-Zsh/"/>
    <url>/2021/04/04/03_%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C%E6%8F%90%E5%8D%87%E8%AE%A1%E5%88%92-iTerm2-Oh-My-Zsh/</url>
    
    <content type="html"><![CDATA[<p>如何让你的终端用起来顺手又炫酷？看完本文，将让你的终端体验大幅提升😎</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 <a href="/2021/04/01/02_MacBook%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%B8%85%E5%8D%95/" title="MacBook前端开发必备清单">MacBook前端开发必备清单</a> 中展示了MacBook前端开发的必备清单，本文将介绍其一： <strong>iTerm2 + Oh-My-Zsh</strong></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p><a href="https://iterm2.com/">iTerm2</a></p><blockquote><p>iTerm2是默认终端的替代品，也是目前Mac系统下最好用的终端工具，集颜值和效率于一身。</p></blockquote></li><li><p><a href="https://ohmyz.sh/">Oh-My-Zsh</a></p><blockquote><p>Oh My Zsh 是一款社区驱动的命令行工具，正如它的主页上说的，Oh My Zsh 是一种生活方式。 它基于Zsh 命令行，提供了主题配置，插件机制，已经内置的便捷操作。它能让你用了直呼： <strong>“Oh My ZSH!” 🤣👏</strong> （它官网的确是这么说的哈哈哈哈）</p></blockquote></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>iTerm2</p><p>安装：</p><p>可以使用上一篇博客提到的Homebrew来安装：<code>brew install iterm2</code></p><p>也可以直接到 <a href="https://iterm2.com/">iTerm2</a> 官网下载</p></li><li><p>Oh-My-Zsh</p><p>安装：</p><p><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p></li></ol><h2 id="配置及使用"><a href="#配置及使用" class="headerlink" title="配置及使用"></a>配置及使用</h2><p>配置主题的前提：</p><blockquote><ol><li>安装了 zsh</li><li>安装了 powerline 字体</li><li>安装方法参考：<a href="https://github.com/powerline/fonts">https://github.com/powerline/fonts</a></li></ol></blockquote><ol><li><p>iTerm2</p><p>先设置字体：</p><p>进入偏好设置 -&gt; Profiles -&gt; Text -&gt; Font -&gt; 选择 <code>Meslo LG S for PowerLine</code></p></li><li><p>Oh-My-Zsh</p></li></ol><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>   打开zsh配置：<code>vim ~/.zshrc</code></p><p>   修改主题：<code>ZSH_THEME=&quot;agnoster&quot;</code> 个人觉得agnoster主题最好看😍</p><p>   生效：<code>source ~/.zshrc</code></p><p>   <img src="/images/theme-show.png" alt="agnoster主题展示及自动补全插件"></p><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>插件有自带的Git，让你可以使用简写，如：</p><p><code>gaa</code> 就是 <code>git add --all</code></p><p>更多常用git快捷键可以看 <a href="/2021/04/05/04_Oh-My-Zsh%E4%B8%ADGit%E7%9A%84%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/" title="Oh-My-Zsh中Git的常用快捷键">Oh-My-Zsh中Git的常用快捷键</a></p><p>此外，还强烈建议装上以下的插件：</p><ol><li><p>zsh-autosuggestion，命令建议和补全</p> <figure class="highlight zsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zsh"><span class="hljs-built_in">cd</span> ~/.oh-my-zsh/custom/plugins/<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions<br></code></pre></div></td></tr></table></figure></li><li><p>zsh-syntax-highlighting，代码高亮</p><figure class="highlight zsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zsh"><span class="hljs-built_in">cd</span> ~/.oh-my-zsh/custom/plugins/<br>git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git<br></code></pre></div></td></tr></table></figure></li><li><p>z， 快速跳转到对应目录，让你不再疯狂输入cd</p><p>只要你输入过该路径，以后你便可以直接使用 <code>z 该目录</code> 直接进入该目录，如下：</p></li></ol><p>  <img src="/images/z.jpg" alt="z快速跳转"></p><p>   由于 <code>z</code> 是 zsh 内置的，所以只需在 plugins中加入 z 即可</p><p>输入 <code>vim ~/.zshrc</code> 进入 .zshrc ，按 <code>i</code> 进入编辑状态，找到plugins，输入以下内容</p><figure class="highlight zsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs zsh">plugins=(<br>  git<br>  zsh-autosuggestions<br>  zsh-syntax-highlighting<br>  z<br>)<br></code></pre></div></td></tr></table></figure><p>然后在文件的最后一行添加：</p><p><code>source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></p><p>输入完成后，点击键盘<code>esc</code>键退出编辑模式，然后输入<code>:wq</code> 保存并退出，最后执行命令 <code>source ~/.zshrc</code> 使刚才的修改生效。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过以上步骤，你拥有了：</p><ol><li>非常好看的终端</li><li>提高效率的插件：代码高亮、自动补全、快速路径跳转、Git命令快捷键</li></ol><p>快去试试吧😎</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Mac</tag>
      
      <tag>效率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacBook前端开发必备清单</title>
    <link href="/2021/04/01/02_MacBook%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%B8%85%E5%8D%95/"/>
    <url>/2021/04/01/02_MacBook%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>当你使用一台MacBook进行前端开发时，有哪些软件或工具是 <strong>“装机必备”</strong>？</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本羊现在用的是16寸MacBook Pro，于2020年初购买，那为什么现在会想写一篇MacBook装机清单的博客呢？因为我上个月电脑主板突然坏了，然后去授权店修了2个星期，除了少数放在桌面的文件能被iCloud恢复，其余存储的内容全没了😭😭😭（以后一定要做好备份）。</p><p>然后我就得重新配置电脑的开发环境，于是就有了这一篇博客：MacBook前端开发必备清单。</p><p>目前电脑的系统是Big Sur 11.2.3，并已安装下面推荐的必备清单并运行良好，现在电脑用起来十分舒服。</p><p><strong>OK，正文开始！</strong></p><h2 id="前端开发必备清单"><a href="#前端开发必备清单" class="headerlink" title="前端开发必备清单"></a>前端开发必备清单</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol><li><p><code>Git、Node、Yarn</code></p><p>最最基本必备的</p></li><li><p><code>VS Code</code></p><p>强推！刚入门前端的时候用的是Webstorm。一次偶然的机会用到了VS Code，一秒沦陷，各种插件太舒服了！如果一定要我从这么多插件中只选3样，那我必须推荐（太热门的就不特意推荐了哈哈哈）：</p><p><strong>Image preview</strong></p><p><strong>Git Graph</strong></p><p><strong>别名路径跳转</strong></p><p>PS: 一定要开启设置同步（登录后能自动同步设置、插件等），所以我能轻松在我个人笔记本和公司台式之间反复横跳开发。</p></li><li><p><code>Chrome</code></p><p>最强大的浏览器（没有之一😎），强烈推荐登录谷歌账号、安装扩展，强烈推荐以下扩展：</p><p><strong>Infinity Pro</strong>：超好看的首页</p><p><strong>uBlock Origin</strong>：过滤一切广告及干扰，让你清爽网上冲浪</p><p><strong>OneTab</strong>：有时候浏览器必须打开很多标签，但又不想关掉，OneTab就是必备的了，很方便，一键收纳标签，节省内存</p></li><li><p><code>Charles</code></p><p>抓包工具，方便移动端调试。</p></li></ol><h3 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h3><ol><li><p>iTerm2 和 oh-my-zsh</p><p>此神仙组合能让你的终端好用一万倍🤩🤩🤩，详细配置文章看这里：</p><a href="/2021/04/04/03_%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C%E6%8F%90%E5%8D%87%E8%AE%A1%E5%88%92-iTerm2-Oh-My-Zsh/" title="终端体验提升计划-iTerm2 + Oh-My-Zsh">终端体验提升计划-iTerm2 + Oh-My-Zsh</a></li><li><p><a href="https://brew.sh/index_zh-cn">Homebrew</a></p><p>HomeBrew 是一款用于 macOS 的开源的软件包管理器，能够帮助你快速下载软件。</p><p><strong>那为什么要选Homebrew？</strong></p><p>一般情况下，在 Mac 上安装软件程序，通常是在 Mac App Store 搜索，然后安装。但是，对于不在 Mac App Store 上架的软件，你需要：</p><ol><li><p>先在搜索引擎中搜索，找到官网，</p></li><li><p>然后打开下载页面下载，</p></li><li><p>最后再将下载的安装包拖到「软件程序」文件夹或执行安装。</p></li><li><p>清理安装包</p></li></ol><p>这也太麻烦了吧😅😅😅</p><p>而使用Homebrew，你只需要在终端输入一行命令，就可以解决包括查找、下载和安装软件的一系列步骤。</p><p>例如安装Chrome浏览器，你只需在终端输入：</p><p><code>brew install google-chrome</code></p><p>例如安装git：</p><p><code>brew install git</code></p><p>是不是非常简单快捷？👏👏👏</p><p>Homebrew的具体说明请看这里：</p><a href="/2021/04/06/05_Mac%E5%BF%85%E5%A4%87%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Homebrew/" title="Mac必备神器——Homebrew">Mac必备神器——Homebrew</a></li><li><p>Alfred</p><p>Alfred 是一款能让你提高效率的神器，它比Mac自带的“聚焦”有更强大的功能。它能：帮你快速打开网页、快速进行自定义搜索、查看剪贴板历史、快速查询单词等等。</p><p>Alfred 提供的功能虽然很多，但目的只有一个 —— 减少我们工作中的一些重复动作，提升我们的工作效率。</p><p>具体安装及使用请看这里：<a href="/2021/04/17/07_%E6%95%88%E7%8E%87%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Alfred/" title="效率神器——Alfred">效率神器——Alfred</a></p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上的“必备清单”只是我个人的推荐，你可以根据自己喜好自行选择。例如上面的</p><blockquote><p>进阶配置</p></blockquote><p>如果不愿意折腾，其实可以忽略。平常使用原生终端及Mac自带的“聚焦”也足矣。但是如果你想提高开发体验，提交效率，那我还是建议你安装😋😋😋</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>记录</tag>
      
      <tag>Mac</tag>
      
      <tag>前端</tag>
      
      <tag>效率</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建指南（Hexo）</title>
    <link href="/2021/03/28/01_%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/03/28/01_%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><em><strong>如何搭建一个属于自己的在线博客呢？自动打包和部署如何实现？</strong></em> 🤩🤩🤩</p><span id="more"></span><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>在大学某一天，无意间看到了别人的博客网站，这个网站记录了他的学习历程、技术分享文章及日常感想等。当时我觉得这也太酷了吧，于是就萌生了一个搭建个属于自己的博客的想法~</p><p>想法虽然萌生了，但是我并没有立刻行动，一来是当时自己还是个学生，直接被服务器价格劝退了（当时也不知道 Github Pages 怎么用）；二是其实自己平常也有做笔记、做心得记录的习惯，只不过用的是云笔记，记录的知识点也比较任性杂乱（毕竟不用给他人阅读哈哈哈😂）。这样一来二去便作罢了。</p><p><img src="/images/stickers/WTF.jpeg" alt="当我看到服务器价格时"></p><p>但今天，我突然回想起来自己曾经的想法，这想法直接把我从床上拎起来，仿佛在催促我：“赶紧去把这个想法圆了！”</p><p>于是，我动手了。</p><h2 id="实现指南"><a href="#实现指南" class="headerlink" title="实现指南"></a>实现指南</h2><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>本次搭建博客对比了 Hexo、VuePress、Gatsby 3款框架，最终选择了Hexo，因为<strong>主题多</strong>！🤩</p><p>首先确保电脑已经安装 node、npm、git，及已经注册了GitHub账号（需要用Github Pages），这里不赘述。</p><h4 id="安装Hexo脚手架"><a href="#安装Hexo脚手架" class="headerlink" title="安装Hexo脚手架"></a>安装Hexo脚手架</h4><p><code>sudo npm install hexo-cli -g</code> (若是window系统，则不用加sudo命令)</p><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p><code>hexo init blog</code></p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><p><code>npm install</code></p><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p><code>hexo server</code></p><p>此时，项目已经能正常展示。</p><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><p>但是，默认主题并不好看，配一个符合自己审美的主题，例如我的是 <strong>Fluid</strong> (Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令)</p><p><code>npm install --save hexo-theme-fluid</code></p><p>然后在博客目录下创建 <strong>_config.fluid.yml</strong> ，将主题的 <a href="https://github.com/ChuYang-FE/ChuYang-FE.github.io/blob/my-blog/_config.fluid.yml">_config.yml</a> 内容复制过去。</p><p>打开 <strong>_config.yml</strong> 文件，可根据安装的主题修改对应的主题名称（theme）、语言（language）。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></div></td></tr></table></figure><h5 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h5><p>首次使用主题的「关于页」需要手动创建：</p><p><code>hexo new page about</code></p><p>创建成功后修改 /source/about/index.md，添加 layout 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-03-28 20:54:55</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></div></td></tr></table></figure><h3 id="使用-GitHub-Pages-实现博客在线访问"><a href="#使用-GitHub-Pages-实现博客在线访问" class="headerlink" title="使用 GitHub Pages 实现博客在线访问"></a>使用 <strong>GitHub Pages</strong> 实现博客在线访问</h3><h4 id="用GitHub部署站点有2种方式"><a href="#用GitHub部署站点有2种方式" class="headerlink" title="用GitHub部署站点有2种方式"></a>用GitHub部署站点有2种方式</h4><ol><li><p><code>https://[username].github.io</code> （适合博客😎）</p><p>优点：路径足够短</p><p>注意：仓库名必须为 <code>[username].github.io</code>；打包产物分支 <strong>master</strong></p></li><li><p><code>https://[username].github.io/[repo]</code> (适合作为开源项目或者Demo的展示页面)</p><p>优点：可以自定义仓库名称repo</p><p>注意：打包产物分支 <strong>gh-pages</strong></p></li></ol><p>建好仓库以后，使用Git初始化本地项目，并推送到远程仓库。</p><h4 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h4><ol><li><p>首先，我们需要安装一个依赖：<code>hexo-deployer-git</code>，它能帮助我们将代码部署到一个具体的分支。</p></li><li><p>安装好后，打开 <strong>_config.yml</strong> 文件，拉到底部，修改deploy配置，如下图 <img src="/images/deploy-setting.png" alt="deploy配置"></p></li><li><p>执行命令 <code>npm run deploy</code></p></li><li><p>打开GitHub，可以看到打包产物已经被提交到master分支上</p></li><li><p>打开仓库Setting，找到GitHub Pages，可以看到你部署的站点：<a href="https://chuyang-fe.github.io/">https://chuyang-fe.github.io/</a></p></li><li><p>点击链接，发现博客可以在线访问了！🥳🥳🥳</p></li></ol><h3 id="GitHub-Actions-自动化部署"><a href="#GitHub-Actions-自动化部署" class="headerlink" title="GitHub Actions 自动化部署"></a><strong>GitHub Actions</strong> 自动化部署</h3><p>好了，经过以上操作，我们已经拥有了一个属于自己的在线博客站点。</p><p>但是！有一个问题：<strong>我不想每次写完博客都要自己手动打包部署怎么办</strong>🥺？</p><p>正所谓，<del>懒是第一生产力（bushi）</del>，科技是第一生产力，GitHub Actions 帮助你。</p><p>我们可以利用 GitHub Actions 的<strong>自动打包和代码部署</strong>功能。</p><p>在此做自动化部署之前，由于master分支已经被占用，所以我们本地新建一个blog分支，提交代码并push到远程仓库。</p><h4 id="实现自动化部署步骤"><a href="#实现自动化部署步骤" class="headerlink" title="实现自动化部署步骤"></a>实现自动化部署步骤</h4><ol><li>根目录下创建 .github 文件夹，进入该文件夹并创建 workflows 文件夹</li><li>在 workflows 文件夹里创建一个 deploy.yml 文件，内部具体配置代码可以看这里：<a href="../../.github/workflows/deploy.yml">deploy.yml</a></li><li>提交代码，并push到远程仓库</li></ol><p>执行完Git push后，打开GitHub，可以看到blog分支右侧出现了一个小黄点，它代表 GitHub Actions 正在被触发，随后，博客被自动更新。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了！经过以上步骤，以后我们在blog分支上写完博客，本地无需执行打包和部署，只需提交代码，然后Git push即可，博客内容会被<strong>自动更新👏👏👏</strong></p><p>本羊的第一篇博客完工！<strong>🤣🤣🤣</strong></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>博客</tag>
      
      <tag>GitHub</tag>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
